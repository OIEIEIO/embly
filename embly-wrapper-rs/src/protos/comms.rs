// This file is generated by rust-protobuf 2.8.0. Do not edit
// @generated

// https://github.com/Manishearth/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `comms.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_8_0;

#[derive(PartialEq,Clone,Default)]
pub struct Message {
    // message fields
    pub to: u64,
    pub from: u64,
    pub data: ::std::vec::Vec<u8>,
    pub spawn: ::std::string::String,
    pub spawn_address: u64,
    pub exit: i32,
    pub your_address: u64,
    pub parent_address: u64,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // uint64 to = 1;


    pub fn get_to(&self) -> u64 {
        self.to
    }
    pub fn clear_to(&mut self) {
        self.to = 0;
    }

    // Param is passed by value, moved
    pub fn set_to(&mut self, v: u64) {
        self.to = v;
    }

    // uint64 from = 2;


    pub fn get_from(&self) -> u64 {
        self.from
    }
    pub fn clear_from(&mut self) {
        self.from = 0;
    }

    // Param is passed by value, moved
    pub fn set_from(&mut self, v: u64) {
        self.from = v;
    }

    // bytes data = 3;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // string spawn = 4;


    pub fn get_spawn(&self) -> &str {
        &self.spawn
    }
    pub fn clear_spawn(&mut self) {
        self.spawn.clear();
    }

    // Param is passed by value, moved
    pub fn set_spawn(&mut self, v: ::std::string::String) {
        self.spawn = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_spawn(&mut self) -> &mut ::std::string::String {
        &mut self.spawn
    }

    // Take field
    pub fn take_spawn(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.spawn, ::std::string::String::new())
    }

    // uint64 spawn_address = 5;


    pub fn get_spawn_address(&self) -> u64 {
        self.spawn_address
    }
    pub fn clear_spawn_address(&mut self) {
        self.spawn_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_spawn_address(&mut self, v: u64) {
        self.spawn_address = v;
    }

    // int32 exit = 6;


    pub fn get_exit(&self) -> i32 {
        self.exit
    }
    pub fn clear_exit(&mut self) {
        self.exit = 0;
    }

    // Param is passed by value, moved
    pub fn set_exit(&mut self, v: i32) {
        self.exit = v;
    }

    // uint64 your_address = 7;


    pub fn get_your_address(&self) -> u64 {
        self.your_address
    }
    pub fn clear_your_address(&mut self) {
        self.your_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_your_address(&mut self, v: u64) {
        self.your_address = v;
    }

    // uint64 parent_address = 8;


    pub fn get_parent_address(&self) -> u64 {
        self.parent_address
    }
    pub fn clear_parent_address(&mut self) {
        self.parent_address = 0;
    }

    // Param is passed by value, moved
    pub fn set_parent_address(&mut self, v: u64) {
        self.parent_address = v;
    }
}

impl ::protobuf::Message for Message {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.to = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.from = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.spawn)?;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.spawn_address = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.exit = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.your_address = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint64()?;
                    self.parent_address = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.to != 0 {
            my_size += ::protobuf::rt::value_size(1, self.to, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.from != 0 {
            my_size += ::protobuf::rt::value_size(2, self.from, ::protobuf::wire_format::WireTypeVarint);
        }
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.data);
        }
        if !self.spawn.is_empty() {
            my_size += ::protobuf::rt::string_size(4, &self.spawn);
        }
        if self.spawn_address != 0 {
            my_size += ::protobuf::rt::value_size(5, self.spawn_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.exit != 0 {
            my_size += ::protobuf::rt::value_size(6, self.exit, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.your_address != 0 {
            my_size += ::protobuf::rt::value_size(7, self.your_address, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.parent_address != 0 {
            my_size += ::protobuf::rt::value_size(8, self.parent_address, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream) -> ::protobuf::ProtobufResult<()> {
        if self.to != 0 {
            os.write_uint64(1, self.to)?;
        }
        if self.from != 0 {
            os.write_uint64(2, self.from)?;
        }
        if !self.data.is_empty() {
            os.write_bytes(3, &self.data)?;
        }
        if !self.spawn.is_empty() {
            os.write_string(4, &self.spawn)?;
        }
        if self.spawn_address != 0 {
            os.write_uint64(5, self.spawn_address)?;
        }
        if self.exit != 0 {
            os.write_int32(6, self.exit)?;
        }
        if self.your_address != 0 {
            os.write_uint64(7, self.your_address)?;
        }
        if self.parent_address != 0 {
            os.write_uint64(8, self.parent_address)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Message {
        Message::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const ::protobuf::reflect::MessageDescriptor,
        };
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "to",
                    |m: &Message| { &m.to },
                    |m: &mut Message| { &mut m.to },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "from",
                    |m: &Message| { &m.from },
                    |m: &mut Message| { &mut m.from },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "data",
                    |m: &Message| { &m.data },
                    |m: &mut Message| { &mut m.data },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "spawn",
                    |m: &Message| { &m.spawn },
                    |m: &mut Message| { &mut m.spawn },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "spawn_address",
                    |m: &Message| { &m.spawn_address },
                    |m: &mut Message| { &mut m.spawn_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                    "exit",
                    |m: &Message| { &m.exit },
                    |m: &mut Message| { &mut m.exit },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "your_address",
                    |m: &Message| { &m.your_address },
                    |m: &mut Message| { &mut m.your_address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint64>(
                    "parent_address",
                    |m: &Message| { &m.parent_address },
                    |m: &mut Message| { &mut m.parent_address },
                ));
                ::protobuf::reflect::MessageDescriptor::new::<Message>(
                    "Message",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static Message {
        static mut instance: ::protobuf::lazy::Lazy<Message> = ::protobuf::lazy::Lazy {
            lock: ::protobuf::lazy::ONCE_INIT,
            ptr: 0 as *const Message,
        };
        unsafe {
            instance.get(Message::new)
        }
    }
}

impl ::protobuf::Clear for Message {
    fn clear(&mut self) {
        self.to = 0;
        self.from = 0;
        self.data.clear();
        self.spawn.clear();
        self.spawn_address = 0;
        self.exit = 0;
        self.your_address = 0;
        self.parent_address = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    fn as_ref(&self) -> ::protobuf::reflect::ProtobufValueRef {
        ::protobuf::reflect::ProtobufValueRef::Message(self)
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0bcomms.proto\x12\x05comms\"\xda\x01\n\x07Message\x12\x0e\n\x02to\
    \x18\x01\x20\x01(\x04R\x02to\x12\x12\n\x04from\x18\x02\x20\x01(\x04R\x04\
    from\x12\x12\n\x04data\x18\x03\x20\x01(\x0cR\x04data\x12\x14\n\x05spawn\
    \x18\x04\x20\x01(\tR\x05spawn\x12#\n\rspawn_address\x18\x05\x20\x01(\x04\
    R\x0cspawnAddress\x12\x12\n\x04exit\x18\x06\x20\x01(\x05R\x04exit\x12!\n\
    \x0cyour_address\x18\x07\x20\x01(\x04R\x0byourAddress\x12%\n\x0eparent_a\
    ddress\x18\x08\x20\x01(\x04R\rparentAddressb\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy {
    lock: ::protobuf::lazy::ONCE_INIT,
    ptr: 0 as *const ::protobuf::descriptor::FileDescriptorProto,
};

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
